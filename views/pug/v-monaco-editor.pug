script(src="monaco-editor/min/vs/loader.js")
script(type="text/x-template", id="tpl-monaco-editor")
	div(:style="style")

script.
	Vue.component('monaco-editor', {
		template: '#tpl-monaco-editor',

		props: {
			width: { type: [String, Number], default: '100%' },
			height: { type: [String, Number], default: '100%' },
			value: { type: String, default: '// code \n' },
			srcPath: { type: String },
			language: { type: String, default: 'javascript' },
			theme: { type: String, default: 'vs' }, // vs, vs-dark, hc-black
			options: { type: Object, default: () => {} },
			highlighted: { type: Array, default: () => [{
				number: 0,
				class: ''
			}] },
			changeThrottle: { type: Number, default: 0 }
		},
		mounted() {
			this.fetchEditor();
		},
		destroyed() {
			this.destroyMonaco();
		},
		computed: {
			style() {
				const { width, height } = this;
				const fixedWidth = width.toString().indexOf('%') !== -1 ? width : `${width}px`;
				const fixedHeight = height.toString().indexOf('%') !== -1 ? height : `${height}px`;
				return {
					width: fixedWidth,
					height: fixedHeight,
				};
			},
			editorOptions() {
				return Object.assign({}, this.defaults, this.options, {
					value: this.code,
					language: this.language,
					theme: this.theme
				});
			}
		},
		data() {
			return {
				defaults: {
					selectOnLineNumbers: true,
					roundedSelection: false,
					readOnly: false,
					cursorStyle: 'line',
					automaticLayout: false,
					glyphMargin: true
				}
			}
		},
		watch: {
			highlighted: {
				handler(lines) {
					this.highlightLines(lines);
				},
				deep: true
			},
			language () {
				this.editor.setModelLanguage(this.editor.getModel(), this.language)
			},
			value (newCode, oldCode) {
				if(newCode != this.editor.getValue()) {
					this.editor.setValue(newCode);
				}
			}
		},
		methods: {
			highlightLines(lines) {
				if (!this.editor) {
					return;
				}
				lines.forEach((line) => {
					const className = line.class;
					const highlighted = this.$el.querySelector(`.${className}`);
					if (highlighted) {
						highlighted.classList.remove(className);
					}
					const number = parseInt(line.number);
						if (!this.editor && number < 1 || isNaN(number)) {
						return;
					}
					const selectedLine = this.$el.querySelector(`.view-lines [linenumber="${number}"]`);
					if (selectedLine) {
						selectedLine.classList.add(className);
					}
				});
			},
			editorHasLoaded(editor, monaco) {
				this.editor = editor;
				this.editor.setValue(this.value);
				this.monaco = monaco;
				this.editor.onDidChangeModelContent(event =>{
					this.$emit('input', editor.getValue());
				});
				this.$emit('mounted', editor);
			},
			fetchEditor() {
				//monacoLoader.load(this.srcPath, this.createMonaco);
				require.config({ paths: { 'vs': 'monaco-editor/min/vs' }});
				require(['vs/editor/editor.main'], this.createMonaco);
			},
			createMonaco() {
				this.editor = window.monaco.editor.create(this.$el, this.editorOptions);
				this.editorHasLoaded(this.editor, window.monaco);
			},
			destroyMonaco() {
				if (typeof this.editor !== 'undefined') {
					this.editor.dispose();
				}
			}
		}
	})